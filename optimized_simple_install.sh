#!/usr/bin/env bash

# =====================================================================
# Claude Neural Framework - Optimized Simple Installation Script
# Version: 2.0.0
# Date: 2025-05-12
# =====================================================================

# Strict error handling
set -e          # Exit immediately if a command exits with a non-zero status
set -u          # Treat unset variables as an error
set -o pipefail # Pipeline fails on any command failure

# Global configuration
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly LOG_FILE="${SCRIPT_DIR}/installation_log_$(date +%Y%m%d_%H%M%S).log"
readonly CONFIG_DIR="${HOME}/.claude"
readonly VERSION="2.0.0"

# Directory structures
readonly CORE_DIR="${SCRIPT_DIR}/core"
readonly COGNITIVE_DIR="${SCRIPT_DIR}/cognitive"
readonly AGENTS_DIR="${SCRIPT_DIR}/agents"
readonly DOCS_DIR="${SCRIPT_DIR}/docs"
readonly TOOLS_DIR="${SCRIPT_DIR}/tools"

# Colors for output formatting
readonly RESET='\033[0m'
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly BOLD='\033[1m'

# =====================================================================
# Logging Functions
# =====================================================================

# Initialize log file
function init_log() {
  echo "=== Claude Neural Framework Installation Log ===" > "${LOG_FILE}"
  echo "Start time: $(date '+%Y-%m-%d %H:%M:%S')" >> "${LOG_FILE}"
  echo "Script version: ${VERSION}" >> "${LOG_FILE}"
  echo "Running on: $(uname -a)" >> "${LOG_FILE}"
  echo "=======================================" >> "${LOG_FILE}"
}

# Log a message to both console and log file
# Usage: log <level> <message>
function log() {
  local level="${1}"
  local message="${2}"
  local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
  
  echo -e "[${timestamp}] [${level}] ${message}" >> "${LOG_FILE}"
  
  case ${level} in
    INFO)
      echo -e "${GREEN}[INFO]${RESET} ${message}"
      ;;
    WARN)
      echo -e "${YELLOW}[WARN]${RESET} ${message}"
      ;;
    ERROR)
      echo -e "${RED}[ERROR]${RESET} ${message}" >&2
      ;;
    SUCCESS)
      echo -e "${GREEN}[âœ“]${RESET} ${message}"
      ;;
    *)
      echo -e "${message}"
      ;;
  esac
}

# Display a header
function header() {
  echo -e "\n${BLUE}${BOLD}=== $1 ===${RESET}"
  log "INFO" "HEADER: $1"
}

# =====================================================================
# Utility Functions
# =====================================================================

# Check if a command exists
# Usage: command_exists <command>
function command_exists() {
  command -v "$1" &> /dev/null
}

# Check for sudo privileges without requiring password
function has_sudo() {
  sudo -n true &> /dev/null
}

# Cleanup function to be called on script exit
function cleanup() {
  local exit_code=$?
  log "INFO" "Cleaning up temporary files..."
  
  # Remove any temporary files created during installation
  rm -f /tmp/claude_install_*
  
  if [[ $exit_code -eq 0 ]]; then
    log "SUCCESS" "Installation completed successfully"
  else
    log "ERROR" "Installation failed with exit code $exit_code"
    echo -e "\n${RED}${BOLD}Installation failed. Please check ${LOG_FILE} for details.${RESET}"
  fi
  
  exit $exit_code
}

# Handle signals
function handle_signal() {
  log "ERROR" "Installation interrupted by user"
  exit 1
}

# Safe file write function that creates backup of existing file
# Usage: safe_write <file_path> <content_function>
function safe_write() {
  local file="$1"
  local content_function="$2"
  
  # Create directory if it doesn't exist
  mkdir -p "$(dirname "$file")"
  
  # Create backup if file exists
  if [[ -f "$file" ]]; then
    cp "$file" "${file}.backup.$(date +%Y%m%d%H%M%S)"
    log "INFO" "Created backup of existing file: ${file}"
  fi
  
  # Create the file with content generated by the passed function
  $content_function > "$file"
  
  log "SUCCESS" "Created file: ${file}"
}

# Execute with timeout
# Usage: exec_timeout <timeout_seconds> <command> [args...]
function exec_timeout() {
  local timeout=$1
  shift
  
  # Execute command with timeout
  timeout $timeout "$@"
  local exit_code=$?
  
  if [[ $exit_code -eq 124 ]]; then
    log "WARN" "Command timed out after ${timeout} seconds: $*"
    return 124
  elif [[ $exit_code -ne 0 ]]; then
    log "ERROR" "Command failed with exit code ${exit_code}: $*"
    return $exit_code
  fi
  
  return 0
}

# =====================================================================
# Component Setup Functions
# =====================================================================

# Create directory structure
function create_directories() {
  header "Creating directory structure"
  
  local directories=(
    "${CORE_DIR}/config"
    "${CORE_DIR}/mcp"
    "${CORE_DIR}/rag"
    "${COGNITIVE_DIR}/prompts/classification"
    "${COGNITIVE_DIR}/prompts/generation"
    "${COGNITIVE_DIR}/prompts/coding"
    "${COGNITIVE_DIR}/templates"
    "${AGENTS_DIR}/commands"
    "${DOCS_DIR}/guides"
    "${DOCS_DIR}/api"
    "${DOCS_DIR}/examples"
    "${TOOLS_DIR}"
    "${CONFIG_DIR}"
  )
  
  for dir in "${directories[@]}"; do
    if [[ ! -d "$dir" ]]; then
      mkdir -p "$dir"
      log "SUCCESS" "Created directory: $dir"
    else
      log "INFO" "Directory already exists: $dir"
    fi
  done
}

# Create core framework file
function create_core_framework() {
  header "Creating core framework file"
  
  function generate_core_framework() {
    cat << 'EOF'
# Claude Neural Framework - Core Framework

## Overview

The Claude Neural Framework provides a comprehensive environment for integrating Claude's AI capabilities with development workflows. This document serves as the core system prompt for the framework.

## Architecture

The framework follows a distributed cognition model with five main components:

1. **Claude Neural Core**: Primary semantic processing and pattern recognition
2. **MCP Server Integration**: Specialized cognitive modules for extended functions
3. **Developer Interface**: Bidirectional human interaction
4. **System Substrate**: Technical execution environment
5. **Code Repository**: Versioned persistence storage

## Capabilities

- **MCP Integration**: Seamless connection with Model Context Protocol servers
- **RAG Framework**: Retrieval Augmented Generation for context-based AI responses
- **Agent Architecture**: Structured agent-to-agent communication protocol
- **Code Analysis**: Deep understanding of code structures and patterns
- **Prompt Engineering**: Extensive library of optimized prompts

## Usage

The framework can be used through various interfaces:

1. Claude CLI: `claude`
2. MCP Server CLI: `claude mcp`
3. RAG System: Python interfaces in `core/rag`
4. API Integration: JavaScript/Node.js in `core/mcp`

## Configuration

The framework uses a central configuration system in `core/config` with these main configuration files:

- `mcp_config.json`: MCP server configuration
- `rag_config.json`: RAG system configuration
- `security_constraints.json`: Security boundaries and constraints

## Security Considerations

The framework implements multiple security measures:
- Command validation and sanitization
- Path traversal prevention
- Secure API key handling through environment variables
- Configurable execution permissions
EOF
  }
  
  safe_write "${COGNITIVE_DIR}/core_framework.md" generate_core_framework
  
  # Create symbolic link to CLAUDE.md
  if [[ -f "${CONFIG_DIR}/CLAUDE.md" ]]; then
    log "INFO" "Existing CLAUDE.md found in ${CONFIG_DIR}"
    
    if diff -q "${COGNITIVE_DIR}/core_framework.md" "${CONFIG_DIR}/CLAUDE.md" &>/dev/null; then
      log "INFO" "CLAUDE.md is already up to date"
    else
      log "WARN" "Existing CLAUDE.md differs from core_framework.md"
      read -p "Replace existing CLAUDE.md? (y/n): " -r replace_claude
      if [[ $replace_claude =~ ^[Yy]$ ]]; then
        ln -sf "${COGNITIVE_DIR}/core_framework.md" "${CONFIG_DIR}/CLAUDE.md"
        log "SUCCESS" "Updated CLAUDE.md symbolic link"
      else
        log "INFO" "Kept existing CLAUDE.md"
      fi
    fi
  else
    ln -sf "${COGNITIVE_DIR}/core_framework.md" "${CONFIG_DIR}/CLAUDE.md"
    log "SUCCESS" "Created symbolic link to CLAUDE.md"
  fi
}

# Create MCP configuration file
function create_mcp_config() {
  header "Creating MCP configuration file"
  
  function generate_mcp_config() {
    cat << 'EOF'
{
  "version": "1.1.0",
  "description": "Model Context Protocol server configuration",
  "lastUpdated": "2025-05-12",
  "environment": "development",
  "security": {
    "api_key_env_var": "MCP_API_KEY",
    "token_validation": true
  },
  "servers": {
    "sequentialthinking": {
      "enabled": true,
      "autostart": true,
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"],
      "description": "Recursive thought generation for complex problems",
      "max_response_time_ms": 30000,
      "retry_attempts": 3
    },
    "brave-search": {
      "enabled": true,
      "autostart": false,
      "command": "npx",
      "args": ["-y", "@smithery/cli@latest", "run", "@smithery-ai/brave-search"],
      "api_key_env": "MCP_API_KEY",
      "description": "External knowledge acquisition",
      "rate_limit": {
        "requests_per_minute": 10
      }
    },
    "context7-mcp": {
      "enabled": true,
      "autostart": true,
      "command": "npx",
      "args": ["-y", "@smithery/cli@latest", "run", "@upstash/context7-mcp"],
      "api_key_env": "MCP_API_KEY",
      "description": "Context awareness and documentation access",
      "max_response_time_ms": 20000,
      "retry_attempts": 2
    },
    "think-mcp": {
      "enabled": true,
      "autostart": true,
      "command": "npx",
      "args": ["-y", "@smithery/cli@latest", "run", "@anthropic/think-mcp-server"],
      "description": "Meta-cognitive reflection",
      "max_response_time_ms": 15000
    }
  },
  "default_settings": {
    "timeout_ms": 30000,
    "retry_attempts": 2,
    "retry_delay_ms": 1000
  },
  "logging": {
    "enabled": true,
    "level": "info",
    "file": "${HOME}/.claude/logs/mcp.log",
    "rotation": {
      "max_files": 5,
      "max_size_mb": 10
    }
  }
}
EOF
  }
  
  safe_write "${CORE_DIR}/config/mcp_config.json" generate_mcp_config
}

# Create RAG configuration file
function create_rag_config() {
  header "Creating RAG configuration file"
  
  function generate_rag_config() {
    cat << 'EOF'
{
  "version": "1.1.0",
  "description": "Retrieval Augmented Generation system configuration",
  "lastUpdated": "2025-05-12",
  "database": {
    "primary": {
      "type": "lancedb",
      "connection": {
        "path": "data/lancedb"
      },
      "dimensions": 1024,
      "metrics": {
        "similarity": "cosine"
      }
    },
    "fallback": {
      "type": "chromadb",
      "connection": {
        "path": "data/chromadb"
      },
      "dimensions": 1024,
      "metrics": {
        "similarity": "cosine"
      }
    }
  },
  "embedding": {
    "provider": "voyage",
    "model": "voyage-2",
    "dimensions": 1024,
    "api_key_env": "VOYAGE_API_KEY",
    "fallback": {
      "provider": "huggingface",
      "model": "sentence-transformers/all-mpnet-base-v2",
      "dimensions": 768
    }
  },
  "retrieval": {
    "top_k": 5,
    "similarity_threshold": 0.7,
    "reranking": {
      "enabled": false,
      "model": "cross-encoder/ms-marco-MiniLM-L-6-v2"
    },
    "chunk_size": 1000,
    "chunk_overlap": 200
  },
  "caching": {
    "enabled": true,
    "ttl_seconds": 3600,
    "max_items": 1000,
    "strategy": "lru"
  },
  "performance": {
    "batch_size": 32,
    "parallel_processing": true,
    "max_threads": 4
  },
  "logging": {
    "enabled": true,
    "level": "info",
    "path": "${HOME}/.claude/logs/rag.log"
  },
  "security": {
    "sanitize_inputs": true,
    "max_token_limit": 8192
  }
}
EOF
  }
  
  safe_write "${CORE_DIR}/config/rag_config.json" generate_rag_config
}

# Create security constraints file
function create_security_constraints() {
  header "Creating security constraints file"
  
  function generate_security_constraints() {
    cat << 'EOF'
{
  "version": "1.1.0",
  "description": "Security constraints and boundaries for the framework",
  "lastUpdated": "2025-05-12",
  "execution": {
    "confirmation_required": true,
    "allowed_commands": [
      "git",
      "npm",
      "node",
      "python",
      "docker",
      "test",
      "ls",
      "find",
      "grep"
    ],
    "blocked_commands": [
      "rm -rf /",
      "sudo",
      "chmod 777",
      "curl | bash",
      "wget | bash",
      "eval",
      "sudo chmod",
      "shutdown",
      "reboot"
    ],
    "argument_validation": {
      "enabled": true,
      "patterns": {
        "blocked": [
          "\\|\\s*sh",
          "\\|\\s*bash",
          ">[^\\s]*~",
          "sudo\\s+"
        ]
      }
    }
  },
  "filesystem": {
    "read": {
      "allowed": true,
      "paths": [
        "./",
        "../",
        "~/.claude/"
      ],
      "excluded_patterns": [
        "\\.env$",
        "\\.pem$",
        "\\.key$",
        "id_rsa",
        "authorized_keys",
        "\\.credentials"
      ]
    },
    "write": {
      "allowed": true,
      "confirmation_required": true,
      "paths": [
        "./",
        "./src/",
        "./docs/",
        "./ai_docs/",
        "./specs/",
        "./.claude/"
      ],
      "excluded_patterns": [
        "/etc/",
        "/bin/",
        "/sbin/",
        "/boot/",
        "~/.ssh/"
      ]
    },
    "path_traversal_prevention": {
      "enabled": true,
      "normalize_paths": true,
      "blocked_patterns": [
        "\\.\\./\\.\\./",
        "~/"
      ]
    }
  },
  "network": {
    "allowed": true,
    "restricted_domains": [
      "localhost"
    ],
    "allowed_ports": [
      80,
      443,
      8000,
      8080
    ],
    "url_validation": {
      "enabled": true,
      "blocked_schemes": [
        "file:",
        "data:"
      ]
    }
  },
  "api_keys": {
    "environment_variables_only": true,
    "required_key_length": 32,
    "key_rotation": {
      "reminder_days": 90
    }
  },
  "memory_usage": {
    "max_heap_mb": 2048,
    "max_execution_time_sec": 300
  },
  "audit": {
    "enabled": true,
    "log_commands": true,
    "log_path": "${HOME}/.claude/logs/security_audit.log",
    "max_log_size_mb": 10,
    "log_rotation": {
      "enabled": true,
      "max_files": 5
    }
  }
}
EOF
  }
  
  safe_write "${CORE_DIR}/config/security_constraints.json" generate_security_constraints
}

# Create README file
function create_readme() {
  header "Creating README file"
  
  function generate_readme() {
    cat << 'EOF'
# Claude Neural Framework

> Eine fortschrittliche Integrationsplattform fÃ¼r Claude's KI-FÃ¤higkeiten mit MCP und RAG

## Ãœbersicht

Das Claude Neural Framework bietet eine umfassende LÃ¶sung fÃ¼r die Integration von Claude's kognitiven FÃ¤higkeiten in Entwicklungs-Workflows. Es kombiniert agentenbasierte Architektur, MCP-Integration (Model Context Protocol) und fortschrittliches Prompt-Engineering in einer konsistenten Arbeitsumgebung.

## Installation

```bash
# Repository klonen
git clone https://github.com/username/claude-code.git
cd claude-code

# Installation ausfÃ¼hren
./optimized_simple_install.sh

# API-SchlÃ¼ssel konfigurieren
export CLAUDE_API_KEY="YOUR_CLAUDE_API_KEY"
```

## Hauptfunktionen

- **MCP-Integration**: Nahtlose Verbindung mit Model Context Protocol-Servern
- **RAG-Framework**: Retrieval Augmented Generation fÃ¼r kontextbasierte KI-Antworten
- **Agentenarchitektur**: Strukturiertes Agent-zu-Agent-Kommunikationsprotokoll
- **Codeanalyse**: Tiefgreifendes VerstÃ¤ndnis von Codestrukturen und -mustern

## Verzeichnisstruktur

```
claude-code/
â”œâ”€â”€ core/                # KernfunktionalitÃ¤t
â”‚   â”œâ”€â”€ config/          # Konfigurationsdateien
â”‚   â”œâ”€â”€ mcp/             # MCP-Integration
â”‚   â””â”€â”€ rag/             # RAG-Framework
â”œâ”€â”€ agents/              # Agentenbasierte Architektur
â”‚   â””â”€â”€ commands/        # Agentenbefehle
â”œâ”€â”€ cognitive/           # Kognitive Komponenten
â”‚   â”œâ”€â”€ prompts/         # Prompt-Bibliothek
â”‚   â””â”€â”€ templates/       # Wiederverwendbare Templates
â””â”€â”€ docs/                # Dokumentation
    â”œâ”€â”€ architecture/    # Architekturdetails
    â”œâ”€â”€ guides/          # Anleitungen
    â””â”€â”€ examples/        # Beispiele
```

## Konfiguration

Das Framework verwendet JSON-Konfigurationsdateien, um Verhalten und FunktionalitÃ¤t zu steuern:

* `core/config/mcp_config.json`: Konfiguration der MCP-Server
* `core/config/rag_config.json`: Konfiguration des RAG-Systems
* `core/config/security_constraints.json`: Sicherheitsgrenzen und -einschrÃ¤nkungen

## Sicherheit

Das Framework implementiert verschiedene SicherheitsmaÃŸnahmen:

* Befehlsvalidierung und Sanitisierung
* Verhinderung von Path Traversal
* Sichere API-SchlÃ¼sselverwaltung durch Umgebungsvariablen
* Konfigurierbare AusfÃ¼hrungsberechtigungen

## Entwicklung

FÃ¼r die Entwicklung mit dem Framework empfehlen wir die Verwendung von:

* Node.js v18+ (LTS empfohlen)
* Python 3.8+ (fÃ¼r RAG-Komponenten)
* Ein moderner Code-Editor mit TypeScript-UnterstÃ¼tzung

## Support

Bei Problemen oder Fragen wenden Sie sich bitte an:

* GitHub Issues: [github.com/username/claude-code/issues](https://github.com/username/claude-code/issues)
* Dokumentation: Siehe `docs/` Verzeichnis
EOF
  }
  
  safe_write "${SCRIPT_DIR}/README.md" generate_readme
}

# Check system requirements
function check_requirements() {
  header "Checking system requirements"
  
  local missing_deps=()
  local essential_deps=("curl" "git" "node" "npm" "python3")
  
  for cmd in "${essential_deps[@]}"; do
    if ! command_exists "$cmd"; then
      missing_deps+=("$cmd")
      log "ERROR" "Required dependency not found: $cmd"
    else
      local version=""
      case $cmd in
        node)
          version=$(node -v)
          ;;
        npm)
          version=$(npm -v)
          ;;
        python3)
          version=$(python3 --version)
          ;;
        git)
          version=$(git --version)
          ;;
        curl)
          version=$(curl --version | head -n 1)
          ;;
      esac
      log "INFO" "Found $cmd: $version"
    fi
  done
  
  if [[ ${#missing_deps[@]} -gt 0 ]]; then
    log "ERROR" "Missing dependencies: ${missing_deps[*]}"
    
    if has_sudo; then
      log "INFO" "Attempting to install missing dependencies..."
      
      # Detect package manager
      if command_exists apt-get; then
        log "INFO" "Using apt-get..."
        sudo apt-get update
        sudo apt-get install -y "${missing_deps[@]}"
      elif command_exists dnf; then
        log "INFO" "Using dnf..."
        sudo dnf install -y "${missing_deps[@]}"
      elif command_exists yum; then
        log "INFO" "Using yum..."
        sudo yum install -y "${missing_deps[@]}"
      elif command_exists brew; then
        log "INFO" "Using Homebrew..."
        brew install "${missing_deps[@]}"
      else
        log "ERROR" "Couldn't detect package manager. Please install missing dependencies manually."
        echo -e "\n${RED}${BOLD}Missing dependencies: ${missing_deps[*]}${RESET}"
        echo -e "Please install them manually and run the script again."
        exit 1
      fi
    else
      log "ERROR" "No sudo access to install missing dependencies"
      echo -e "\n${RED}${BOLD}Missing dependencies: ${missing_deps[*]}${RESET}"
      echo -e "Please install them manually and run the script again."
      exit 1
    fi
  else
    log "SUCCESS" "All required dependencies are installed"
  fi
  
  # Check versions
  local node_version=$(node -v | cut -d 'v' -f 2)
  local node_major=$(echo "$node_version" | cut -d '.' -f 1)
  
  if [[ $node_major -lt 14 ]]; then
    log "WARN" "Node.js version $node_version is below recommended version (18+)"
    log "WARN" "Some features may not work as expected"
  fi
  
  local python_version=$(python3 --version 2>&1 | cut -d ' ' -f 2)
  local python_major=$(echo "$python_version" | cut -d '.' -f 1)
  local python_minor=$(echo "$python_version" | cut -d '.' -f 2)
  
  if [[ $python_major -lt 3 || ($python_major -eq 3 && $python_minor -lt 8) ]]; then
    log "WARN" "Python version $python_version is below recommended version (3.8+)"
    log "WARN" "Some features may not work as expected"
  fi
  
  # Check available space
  local available_space=$(df -h . | awk 'NR==2 {print $4}')
  log "INFO" "Available disk space: $available_space"
  
  # Check memory
  if command_exists free; then
    local available_memory=$(free -h | awk '/^Mem:/ {print $7}')
    log "INFO" "Available memory: $available_memory"
  fi
  
  log "SUCCESS" "System requirements check completed"
}

# Install npm dependencies
function install_npm_dependencies() {
  header "Installing NPM dependencies"
  
  local dependencies=(
    "@anthropic/sdk"
    "@modelcontextprotocol/server-sequential-thinking"
    "@smithery/cli"
  )
  
  if [[ -f "${SCRIPT_DIR}/package.json" ]]; then
    log "INFO" "Found package.json, installing dependencies..."
    npm install --no-fund
  else
    log "INFO" "Creating package.json and installing core dependencies..."
    
    # Initialize package.json if it doesn't exist
    npm init -y > /dev/null
    
    # Install core dependencies
    npm install --no-fund "${dependencies[@]}"
  fi
  
  log "SUCCESS" "NPM dependencies installed"
}

# Configure environment
function configure_environment() {
  header "Configuring environment"
  
  # Create .env.example file
  function generate_env_example() {
    cat << 'EOF'
# Claude Neural Framework - Environment Variables
# Copy this file to .env and fill in your API keys

# Anthropic API Key for Claude
CLAUDE_API_KEY=your_anthropic_api_key_here

# MCP API Key for Model Context Protocol servers
MCP_API_KEY=your_mcp_api_key_here

# Vector Embedding API Key (optional)
VOYAGE_API_KEY=your_voyage_api_key_here

# Framework Configuration
NODE_ENV=development
LOG_LEVEL=info
FRAMEWORK_VERSION=2.0.0

# RAG System Configuration
DATABASE_TYPE=lancedb
EMBEDDING_MODEL=voyage-2
TOP_K=5
EOF
  }
  
  safe_write "${SCRIPT_DIR}/.env.example" generate_env_example
  
  # Check for existing shell configuration
  local shell_config=""
  if [[ -f "${HOME}/.zshrc" ]]; then
    shell_config="${HOME}/.zshrc"
  elif [[ -f "${HOME}/.bashrc" ]]; then
    shell_config="${HOME}/.bashrc"
  fi
  
  if [[ -n "$shell_config" ]]; then
    log "INFO" "Found shell configuration: $shell_config"
    
    if ! grep -q "CLAUDE_API_KEY" "$shell_config"; then
      log "INFO" "Adding environment variables to $shell_config"
      
      read -p "Would you like to add Claude environment variables to your shell configuration? (y/n): " -r add_env
      if [[ $add_env =~ ^[Yy]$ ]]; then
        # Append environment variables to shell configuration
        cat << 'EOF' >> "$shell_config"

# Claude Neural Framework Environment Variables
export CLAUDE_API_KEY="your_anthropic_api_key_here"
export MCP_API_KEY="your_mcp_api_key_here"
# export VOYAGE_API_KEY="your_voyage_api_key_here"
EOF
        log "SUCCESS" "Added environment variables to $shell_config"
        log "WARN" "Please restart your terminal or run 'source $shell_config' to apply changes"
        log "WARN" "Don't forget to set your actual API keys in $shell_config"
      fi
    else
      log "INFO" "Environment variables already exist in $shell_config"
    fi
  else
    log "WARN" "Could not find shell configuration (.zshrc or .bashrc)"
    log "WARN" "Please manually configure environment variables"
  }
  
  # Create logs directory
  mkdir -p "${CONFIG_DIR}/logs"
  log "SUCCESS" "Created logs directory: ${CONFIG_DIR}/logs"
  
  log "SUCCESS" "Environment configuration completed"
}

# Create sample API client
function create_sample_api_client() {
  header "Creating sample API client"
  
  function generate_api_client() {
    cat << 'EOF'
#!/usr/bin/env node

/**
 * Claude Neural Framework - Sample API Client
 * Version: 1.0.0
 * 
 * This script demonstrates how to use the Anthropic API with the Claude Neural Framework
 * 
 * Usage:
 *   node claude_api_client.js "Your prompt here"
 * 
 * Environment variables:
 *   CLAUDE_API_KEY - Your Anthropic API key
 */

const fs = require('fs');
const path = require('path');
const Anthropic = require('@anthropic/sdk');

// Configuration
const MODEL = 'claude-3-7-sonnet-20250219';
const MAX_TOKENS = 1024;
const TEMPERATURE = 0.7;

// Initialize Anthropic client
function createClient() {
  const apiKey = process.env.CLAUDE_API_KEY;
  
  if (!apiKey) {
    console.error('Error: CLAUDE_API_KEY environment variable is not set');
    console.error('Please set your Anthropic API key in the environment');
    process.exit(1);
  }
  
  return new Anthropic({
    apiKey: apiKey,
  });
}

// Load system prompt from cognitive/core_framework.md
function loadSystemPrompt() {
  try {
    const frameworkPath = path.join(__dirname, 'cognitive', 'core_framework.md');
    if (fs.existsSync(frameworkPath)) {
      return fs.readFileSync(frameworkPath, 'utf8');
    } else {
      console.warn('Warning: core_framework.md not found, using default system prompt');
      return 'You are Claude, an AI assistant by Anthropic.';
    }
  } catch (error) {
    console.error('Error loading system prompt:', error.message);
    return 'You are Claude, an AI assistant by Anthropic.';
  }
}

// Process user prompt and generate response
async function processPrompt(prompt) {
  const client = createClient();
  const systemPrompt = loadSystemPrompt();
  
  console.log('Sending request to Claude API...');
  
  try {
    const result = await client.messages.create({
      model: MODEL,
      max_tokens: MAX_TOKENS,
      temperature: TEMPERATURE,
      system: systemPrompt,
      messages: [
        {
          role: 'user',
          content: prompt
        }
      ]
    });
    
    return result.content.filter(c => c.type === 'text').map(c => c.text).join('\n');
  } catch (error) {
    console.error('Error calling Claude API:', error.message);
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Details:', error.response.data);
    }
    process.exit(1);
  }
}

// Main function
async function main() {
  const prompt = process.argv[2] || 'Tell me about the Claude Neural Framework.';
  
  try {
    const response = await processPrompt(prompt);
    console.log('\nClaude Response:');
    console.log('================');
    console.log(response);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
}

// Run the main function
main().catch(console.error);
EOF
  }
  
  safe_write "${SCRIPT_DIR}/claude_api_client.js" generate_api_client
  chmod +x "${SCRIPT_DIR}/claude_api_client.js"
  log "SUCCESS" "Created sample API client: ${SCRIPT_DIR}/claude_api_client.js"
}

# Display final message
function display_final_message() {
  header "Installation complete"
  
  cat << EOF

${GREEN}${BOLD}=== Claude Neural Framework Installed Successfully ===${RESET}

Your installation is ready to use. Here's what was installed:

${CYAN}Core Components:${RESET}
- Framework configuration files in ${BOLD}${CORE_DIR}/config/${RESET}
- Core framework system prompt in ${BOLD}${COGNITIVE_DIR}/core_framework.md${RESET}
- Sample API client in ${BOLD}${SCRIPT_DIR}/claude_api_client.js${RESET}

${CYAN}Next Steps:${RESET}
1. Set your API keys in the environment:
   ${BOLD}export CLAUDE_API_KEY="your_anthropic_api_key_here"${RESET}
   ${BOLD}export MCP_API_KEY="your_mcp_api_key_here"${RESET}

2. Test the sample API client:
   ${BOLD}node claude_api_client.js "Hello, Claude!"${RESET}

3. Install additional NPM packages as needed:
   ${BOLD}npm install <package-name>${RESET}

${CYAN}Documentation:${RESET}
- Review the README.md file for framework overview
- Environment variables are documented in .env.example

${YELLOW}Note:${RESET} For any issues, please check the installation log at:
${BOLD}${LOG_FILE}${RESET}

Thank you for installing the Claude Neural Framework!
EOF
}

# =====================================================================
# Main Installation Process
# =====================================================================

function main() {
  # Start time for timing the installation
  local start_time=$(date +%s)
  
  # Register cleanup function
  trap cleanup EXIT
  trap handle_signal INT TERM
  
  # Initialize log file
  init_log
  
  # Display banner
  echo -e "${BLUE}${BOLD}=========================================================${RESET}"
  echo -e "${BLUE}${BOLD}    Claude Neural Framework - Optimized Installation    ${RESET}"
  echo -e "${BLUE}${BOLD}=========================================================${RESET}"
  echo -e "${CYAN}Version: ${VERSION}${RESET}"
  echo -e "${CYAN}Date: $(date '+%Y-%m-%d')${RESET}"
  echo -e "${CYAN}Installation directory: ${SCRIPT_DIR}${RESET}"
  echo -e "${BLUE}${BOLD}=========================================================${RESET}\n"
  
  # Run installation steps
  check_requirements
  create_directories
  create_core_framework
  create_mcp_config
  create_rag_config
  create_security_constraints
  create_readme
  install_npm_dependencies
  configure_environment
  create_sample_api_client
  
  # Calculate installation time
  local end_time=$(date +%s)
  local duration=$((end_time - start_time))
  log "INFO" "Installation completed in $duration seconds"
  
  # Display final message
  display_final_message
}

# Run the main function
main "$@"