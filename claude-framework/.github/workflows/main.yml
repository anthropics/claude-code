name: Claude Neural Framework CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup ESLint
        run: |
          npm install eslint eslint-plugin-node eslint-plugin-security --save-dev
          echo '{
            "extends": ["eslint:recommended", "plugin:node/recommended", "plugin:security/recommended"],
            "env": {
              "node": true,
              "es6": true
            },
            "parserOptions": {
              "ecmaVersion": 2020
            }
          }' > .eslintrc.json
      
      - name: Run ESLint
        run: npx eslint core/ --ext .js

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm test
      
      - name: Generate test coverage
        run: npm run test:coverage
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: coverage/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run integration tests
        run: npm run test:integration

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Audit dependencies
        run: npm audit
      
      - name: Run security review
        run: node core/security/security_check.js --output security-report.json --relaxed

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.json

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build package
        run: |
          mkdir -p dist
          # Add your build steps here
          cp -R core dist/
          cp -R docs dist/
          cp package.json dist/
          cp README.md dist/
          cp LICENSE.md dist/
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: framework-build
          path: dist/

  # This job only runs on pushes to main, not on PRs
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: framework-build
          path: dist
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Deploy to staging
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment steps here, for example:
          # - Upload to cloud storage
          # - Deploy to a staging server
          # - Update staging environment configuration
          echo "Deployment to staging completed."